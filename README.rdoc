<em>The Gliffy API is currently in private beta.  This will be a Ruby implementation to access your Gliffy account.</em>

<em>The documentation below is currently out of date; Gliffy has updated their API and I'm working on getting this code to work with the changes (mostly OAuth for authentication)</em>

This consists of a Ruby client for Gliffy as well as a simple command line tool to access your Gliffy account using that client.

= Development

== Unit Tests

Make sure you get at least 100% statement coverage of the code you write via Unit Tests.

== Integration Tests

This code is capable of running integration tests against Gliffy's integration test servers.
If you would like to run these tests, you must contact Gliffy for the information needed.
You could technically run integration tests against your own Gliffy account on their production 
server, but this may delete or change your account's data and is not recommended.  Once you
have the information from Gliffy, create the file `test/it_cred.rb` as follows:

    $account_id = # integration tests account id
    $username = # integration tests admin user name
    $oauth_consumer_key = # integration test account consumer key
    $oauth_consumer_secret = # integration test account consumer secret
    $api_root = # integration test server API endpoint
    $http_auth_username = # integration test server HTTP Auth username
    $http_auth_password = # integration test server HTTP Auth password


= Old Documentation

== Client Library

Main entry point is Gliffy::Handle, though you should look at Gliffy::Config for configuration options.  Here's an example of getting the list of diagrams and then downloading the first one as a JPEG

    require 'gliffy'

    Gliffy::Config.config.api_key='aa9d0e8d-449b-44ad-904a-bf87deb7c403'
    Gliffy::Config.config.secret_key='a52585f7-5952-4229-8bbe-b5787521b571'
    Gliffy::Config.config.account_name='Initech'

    handle = Gliffy::Handle.new('lumberg@initech.com')

    diagrams = handle.get_diagrams
    diagram_name_safe = diagrams[0].name.gsub(/ /,'_')
    handle.get_diagram_as_image(diagrams[0].id,:mime_type => :jpeg,:file=>"#{diagram_name_safe}.jpg")

The Gliffy::Handle is a <b>user-session based connection</b> to Gliffy.  You shoudl therefore engineer your application to keep one of these per user who will access Gliffy and *not* make a global instance.

* RDoc is available a http://davetron5000.github.com/gliffy
* Source is available at http://github.com/davetron5000/gliffy/tree/master

== Command Line Client

+gliffy+ +help+ shows a list of commands.  Currently, there are:

[+delete+] Delete a diagram (also: del,rm)
[+edit+]   Edit a diagram 
[+get+]    Download a diagram as an image to a file 
[+help+]   Show commands 
[+list+]   List all diagrams in the account (also: ls)
[+new+]    Create a new diagram 
[+url+]    Get the URL for an image 

=== Configuration

The first time you run the client, it will create a base configuration in your home directory called <tt>.gliffyrc</tt>, and will ask you to provide it with four pieces of information:

[API Key] This is the API Key given to you by Gliffy
[Secret Key] This is the Secret Key given to you by Gliffy.  <b>Do not check this value into source control</b>
[Account Name] Your account's name.  This should've been provided with your API Key
[Username] The username to work under.  The command line client only allows single-user access to your Gliffy account.  If you just signed up for Gliffy, this is probably the email address you used to sign up

If you are not on OS X, you will want to configure two other options, and you can do this by editing your <tt>.gliffyrc</tt> directly:

[<tt>open_image</tt>] Configures the command for opening an image from the command line.  This should be a string of the form <tt>command %s</tt> where <tt>%s</tt> will be replaced with the name of the image file to open.
[<tt>open_url</tt>] Configures the command for opening an url from the command line.  This should be a string of the form <tt>command %s</tt> where <tt>%s</tt> will be replaced with the name of the url to open.

The other options are all documented in Gliffy::Config.  Note that your most previously received user token is stored here as well, to keep from getting it every time the client is run.

=== Example

    > gliffy ls
    1573119 Deployment Artifacts
    1569470 Monthly_Eligible
    1569477 Monthly_Ineligibile
    1569478 Quarterly_Eligible
    1569479 Quarterly_Ineligibile
    > gliffy get 1569479
    Quarterly_Ineligibile.jpg
    > gliffy get 1569479 -d ~/Downloads -t png
    /Users/davec/Downloads/Quarterly_Ineligibile.png
    > gliffy edit 1569470
    # You are sent to gliffy.com in your browser to edit that diagram
    > gliffy new -e "Class Diagram"
    # You are sent to gliffy.com to edit the new diagram 

