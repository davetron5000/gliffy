#!/usr/bin/ruby
$: << File.expand_path(File.dirname(__FILE__) + '/../lib')
$: << File.expand_path(File.dirname(__FILE__) + '/../ext')
require 'rubygems'
require 'gli'
require 'etc'
require 'gliffy'

$description = 'Gliffy Command Line Client'

include GLI

desc 'Location of your gliffy configuration'
default_value Etc.getpwuid.dir + '/.gliffyrc'
arg_name 'path to gliffy config file'
flag [:config]

desc 'Show debug info'
switch [:debug]

#desc 'Use gob-go instead of the real gliffy (devs only)'
#switch [:gobgotest]

desc 'Delete a folder'
arg_name 'path (relative to ROOT) of folders you want delete'
command [:rmdir,:rd] do |c|
  c.action do |global_options,options,args|
    args.each do |path|
      $handle.folder_delete(path)
      puts "Deleted #{path}"
    end
  end
end

desc 'Create a new folder'
arg_name 'folders you want created inside the ROOT folder'
command [:mkdir,:md] do |c|
  c.action do |global_options,options,args|
    args.each do |path|
      $handle.folder_create(path)
      puts "Created #{path}"
    end
  end
end

desc 'Move diagram to a new folder'
arg_name 'document_id full_folder_path'
command [:mv,:move] do |c|
  c.action do |global_options,options,args|
    if args.length == 2
      $handle.document_move(args[0],args[1])
    else
      raise "Must specify the document id and folder path only"
    end
  end
end

desc 'List folders'
command [:lsf,:lsfolders] do |c|
  def output_folder(f)
    puts f.path
    f.child_folders.each do |child|
      output_folder(child)
    end
  end

  c.action do |global_options,options,args|
    folders = $handle.account_folders
    folders.each do |folder|
      output_folder(folder)
    end
  end
end

desc 'List diagram ids and names'
long_desc 'This shows you the diagrams available to you.  By default this will be all diagrams in all folders to which you have access.  If you specify a folder on the command line, you will see diagrams only in that folder'
arg_name 'Folder to list (omit for all folders)'
command [:ls,:list] do |c|

  c.desc 'Show id, public?, versions, owner, update date, name'
  c.long_desc 'This shows  more information about the diagrams.  The columsn shown are, in order: diagram id, "P" for public/"-" for not public, the number of versions of the diagram, the username of the diagram owner, the last updated date, and the diagram name'
  c.switch :l

  c.desc 'Sort by id'
  c.switch :i

  c.desc 'Sort by mod date'
  c.switch :t

  c.action do |global_options,options,args|
    if args.size == 1
      documents = $handle.folder_documents(args[0])
    elsif args.size == 0
      documents = $handle.user_documents
    else
      raise "Either zero or one folder names are supported"
    end

    sorted = documents.sort{|a,b| a.name <=> b.name} if !options[:i] && !options[:t]
    sorted = documents.sort{|a,b| a.mod_date <=> b.mod_date} if options[:t]
    sorted = documents.sort{|a,b| a.document_id <=> b.document_id} if options[:i]

    sorted.each do |doc|
      if options[:l]
        printf "%8d %s %4d %20s  %18s  %s\n",doc.document_id,doc.is_public? ? "P" : "-",doc.num_versions,doc.owner.username[0..19],doc.mod_date.strftime("%Y-%m-%d %H:%M:%S"),doc.name
      else
        puts "#{doc.document_id} - #{doc.name}"
      end
    end
  end
end

desc 'Delete a diagram'
command [:rm,:delete] do |c|
  c.action do |global_options,options,args|
    args.each do |document_id|
      $handle.document_delete(document_id)
      puts "Deleted #{document_id}"
    end
  end
end

desc 'Edit a diagram'
command :edit do |c|

  c.desc 'URL to return to after editing is complete'
  c.default_value 'http://www.gliffy.com'
  c.flag [:u,:url]

  c.desc 'Text on the "Return" button in Gliffy Editor'
  c.default_value 'Return'
  c.flag [:t,:text]

  c.desc 'Command to run to open URL for editing in browser'
  c.long_desc 'If defined, this command will be run with the URL for editing given to it.  Hopefully, this will pop up Gliffy in your browser.'
  c.default_value RUBY_PLATFORM =~ /^universal-darwin/ ? 'open' : nil
  c.flag [:o,:openwith]

  c.action do |global_options,options,args|
    if args.length == 1
      url = $handle.document_edit_link(args[0],options[:u],options[:t])
      opened = false
      if options[:o]
        opened = system "#{options[:o]} \"#{url}\""
      end
      if !opened
        puts "Problem running #{options[:o]}" if options[:o]
        puts "Go here in your browser"
        puts url
      end
    else
      $stderr.puts "Provide exactly one document id"
    end
  end
end

desc 'View a diagram as an image, or download it'
command [:view,:get] do |c|

  c.desc 'File Type'
  c.default_value 'jpeg'
  c.arg_name 'jpeg, png, svg, xml'
  c.flag [:t,:type]

  c.desc 'Size'
  c.default_value 'L'
  c.arg_name 'L, M, S, T'
  c.flag [:s,:size]

  c.desc 'Version'
  c.arg_name 'version number (omit for latest, "1" is the first version)'
  c.flag [:v,:version]

  c.desc 'Get the URL only'
  c.switch [:u,:url]

  c.desc 'Get the Public URL only (if possibe)'
  c.long_desc 'This is not strictly documented by the gliffy API, but, for public documents, this URL is more usable, as it can be requested any number of times.  The non-public URLs contain signature information that makes them one-time-use only.'
  c.switch [:p,:publicurl]

  c.action do |global_options,options,args|
    args.each do |document_id|
      version = options[:v]
      version_name = ''
      version_name = "_V#{version}" if version
      if options[:u]
        puts $handle.document_get_url(document_id,options[:t].to_sym,options[:s].to_sym,version)
      elsif options[:p]
        document = $handle.document_get_metadata(document_id)
        if document.is_public?
          # This isn't formally documented in the API so we put it here
          puts "http://www.gliffy.com/pubdoc/#{document.document_id}/#{options[:s]}.jpg"
        else
          puts "Document is not public"
          puts $handle.document_get_url(document_id,options[:t].to_sym,options[:s].to_sym,version)
        end
      else
        bytes = $handle.document_get(document_id,options[:t].to_sym,options[:s].to_sym,version)
        filename = "#{document_id}_#{options[:s]}#{version_name}.#{options[:t]}"
        File.open(filename,'wb') do |f|
          f.write(bytes)
        end
        puts "Wrote #{filename}"
      end
    end
  end
end

desc 'Create a new diagram'
arg_name 'Name of the diagram'
command :new do |c|

  c.desc 'Full path to the folder in which this diagram should ilve'
  c.flag [:f,:folder]

  c.desc 'Id of a document to use as a template'
  c.flag [:m,:template]

  c.desc 'URL to return to after editing is complete (for -e only)'
  c.default_value 'http://www.gliffy.com'
  c.flag [:u,:url]

  c.desc 'Text on the "Return" button in Gliffy Editor (for -e only)'
  c.default_value 'Return'
  c.flag [:t,:text]

  c.desc 'Command to run to open URL for editing in browser (for -e only)'
  c.long_desc 'If -e is specified and this is defined, this command will be run with the URL for editing given to it.  Hopefully, this will pop up Gliffy in your browser.'
  c.default_value RUBY_PLATFORM =~ /^universal-darwin/ ? 'open' : nil
  c.flag [:o,:openwith]

  c.desc 'Edit the diagram right after using -o'
  c.long_desc 'If you specified the -o option (or there is a system default ), this will open up your new diagram in Gliffy.'
  c.switch [:e]

  c.action do |global_options,options,args|
    if args.length > 0
      new_document = $handle.document_create(args.join(" "),options[:f],options[:m])
      if options[:e]
        GLI.commands[:edit].execute(global_options,options,[new_document.document_id])
      else
      puts "Created document #{new_document.document_id} - #{new_document.name}"
      end
    else
      $stderr.puts "You must supply the diagram name"
    end
  end
end

desc 'Create your configuration file'
long_desc 'This will ask you a series of questions that will create your gliffy configuration file.  This file will be used for subsequent requests of gliffy and will need to contain your OAuth keys as well as some other information.'
command :config do |c|

  c.desc 'Force a recreation of your config file, even if it exists'
  c.switch :force

  c.action do |global_options,options,args|
    if $config.nil? || options[:force]
      puts "What is account ID?"
      id = $stdin.gets.chomp
      puts "What is your Consumer Key?"
      key = $stdin.gets.chomp
      puts "What is your Consumer Secret?"
      secret = $stdin.gets.chomp
      puts "What is the username or email address of an admin user?"
      user = $stdin.gets.chomp
      puts "About to create your configuration with the following information:"
      puts "Account ID      : #{id}"
      puts "Consumer Key    : #{key}"
      puts "Consumer Secret : #{secret}"
      puts "User Name       : #{user}"
      puts 
      puts "OK? (Y/N)"
      response = $stdin.gets
      if response =~ /^[Yy]/
        cred = Gliffy::Credentials.new(key,secret,$description,id,user)
        write_config(cred,global_options[:config])
        puts "Wrote config to #{global_options[:config]}"
      else
        puts "Aborted"
      end
    else
      $stderr.puts "You already have a config; edit it by hand or use --force to recreate"
    end
  end
end

pre do |global,command,options,args|
  require 'yaml'
  message = nil
  begin
  $config = File.open(global[:config]) { |f| YAML::load(f) }
  rescue
    message = "No config file found at #{global[:config]}\nUse #{$0} config to create one"
    $config = nil
  end
  if $config.nil? && command.name != :config
    $stderr.puts message if !message.nil?
    false
  else
    if !command || command.name != :config
      if global[:gobgotest]
        puts "Going against gob-go -- developers only!"
        class HTTPartyAuth
          def post(url)
            HTTParty.post(url,:basic_auth => {:username => 'gobgotest' , :password => 'gobgotest'})
          end
        end
        $handle = Gliffy::Handle.new(
          'gob-go-stable.gliffy.com/api/1.0',
          'gob-go-stable.gliffy.com/gliffy',
          $config,HTTPartyAuth.new)
      else
        $handle = Gliffy::Handle.new(
          'www.gliffy.com/api/1.0',
          'www.gliffy.com/gliffy',
          $config)
      end
      token = $handle.update_token
      $handle.logger.level = Logger::DEBUG if global[:debug]
      write_config($config,global[:config])
    end
    true
  end
end

def write_config(cred,config)
  File.open(config,'w') do |out|
    YAML.dump(cred,out)
  end
end
GLI.run(ARGV)
